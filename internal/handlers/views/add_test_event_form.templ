package views

import (
	"sep_setting_mgr/internal/domain/models"
	"sep_setting_mgr/internal/handlers/views/components"
	"strconv"
	"time"
)

func eventsBaseUrl(classID int) string {
	return "/dashboard/classes/" + strconv.Itoa(classID) + "/test-events"
}
func getEventFormTitle(isEdit bool) string {
	if isEdit {
		return "Edit Event"
	}
	return "Add Event"
}

func getEventFormSubtitle(isEdit bool) string {
	if isEdit {
		return "Edit a Test Event"
	}
	return "Add a Test Event to Class"
}

func getEventFormID(isEdit bool, eventID int) string {
	if isEdit {
		return "edit-event-form-" + strconv.Itoa(eventID)
	}
	return "add-event-form"
}

func getEventFormPostTarget(isEdit bool, classID, eventID int) string {
	if isEdit {
		return eventsBaseUrl(classID) + "/" + strconv.Itoa(eventID)
	}
	return eventsBaseUrl(classID)
}

func getEventFormTarget(isEdit bool) string {
	if isEdit {
		return "closest tr"
	}
	return "#" + testEventsTableID
}

func getEventFormSwap(isEdit bool) string {
	if isEdit {
		return "outerHTML"
	}
	return "afterbegin"
}

func getEventFormSubmitBtnTitle(isEdit bool) string {
	if isEdit {
		return "Submit"
	}
	return "Add"
}

func getEventNameValue(isEdit bool, name string) string {
	if isEdit {
		return name
	}
	return ""
}

func getEventDateValue(isEdit bool, date *time.Time) string {
	if isEdit {
		return date.Format("2006-01-02")
	}
	return ""
}

templ AddTestEventForm(isEdit bool, classID int, event *models.TestEvent) {
	@components.FormComponent(components.Form{
		ID:       getEventFormID(isEdit, event.ID),
		Title:    getEventFormTitle(isEdit),
		SubTitle: getEventFormSubtitle(isEdit),
		HxAttr: templ.Attributes{
			"hx-post":      getEventFormPostTarget(isEdit, classID, event.ID),
			"hx-target":    getEventFormTarget(isEdit),
			"hx-swap":      getEventFormSwap(isEdit),
			"hx-indicator": "#test-events-indicator",
		},
		SubmitBtnTitle: getEventFormSubmitBtnTitle(isEdit),
		Cancelable:     true,
	}) {
		@components.InputComponent(components.Input{
			Label:       "Test Name",
			Value:       getEventNameValue(isEdit, event.TestName),
			Placeholder: "e.g. Unit 1 Test",
			ID:          "test-name",
			Type:        "text",
			Name:        "test-name",
			Required:    true,
		})
		@components.InputComponent(components.Input{
			Label:    "Test Date",
			Value:    getEventDateValue(isEdit, event.TestDate),
			ID:       "test-date",
			Type:     "date",
			Name:     "test-date",
			Required: true,
		})
	}
}
