package views

import (
	"github.com/labstack/echo/v4"
	"log"
	"sep_setting_mgr/internal/domain/models"
	"sep_setting_mgr/internal/handlers/common"
	"sep_setting_mgr/internal/handlers/views/components"
	"strconv"
	"time"
)

const format string = "2006-01-02"

templ CalendarComponent(assignmentsMap models.AssignmentsByDate, admin bool, r *echo.Echo) {
	<h1>Calendar</h1>
	@WeekComponent(time.Now(), assignmentsMap, admin, r)
	@WeekComponent(getThisMonday().AddDate(0, 0, 7), assignmentsMap, admin, r)
}

templ WeekComponent(date time.Time, dates models.AssignmentsByDate, admin bool, r *echo.Echo) {
	<h2>Week of { date.Format(format) } to { getFriday(date).Format(format) } </h2>
	<div class="flex gap-2">
		<h3>{ date.Format(format) }</h3>
		for i := 0; i < 5; i++ {
			@DayComponent(date.AddDate(0, 0, i), dates[models.NormalizeDate(date.AddDate(0, 0, i))], admin, r)
		}
	</div>
}

templ DayComponent(date time.Time, blocks models.AssignmentsByBlock, admin bool, r *echo.Echo) {
	<table>
		<thead>
			<tr>
				<th>First Name</th>
				<th>Last Name</th>
				<th>Test Name</th>
				<th>One on One</th>
				<th>Block</th>
				<th>Room</th>
			</tr>
		</thead>
		<tbody>
			for i:=0; i<4; i++ {
				<tr><td colspan="5">Block { strconv.Itoa(i+1) }</td></tr>
				for roomID, assignmentList  := range blocks[i+1] {
					<tr><td colspan="5">{ assignmentList[0].Room.Number }</td></tr>
					for _, assignment := range assignmentList {
						<tr>
							<td>{ assignment.Student.FirstName }</td>
							<td>{ assignment.Student.LastName }</td>
							<td>{ assignment.TestEvent.TestName }</td>
							<td>{ strconv.FormatBool(assignment.Student.OneOnOne) }</td>
							<td>{ strconv.Itoa(assignment.Block) }</td>
							<td
								if createOverBookedTracker(assignmentList)[roomID] {
									class={ overBookedWarningClass }
								}
							>{ getRoom(*assignment) }</td>
							if admin {
								<td>
									@components.ButtonComponent(components.Button{
										Attr: templ.Attributes{
											"hx-get":      r.Reverse(string(common.ShowAssignRoomForm), assignment.ID),
											"hx-target":   "#modal",
											"hx-push-url": "true",
										},
									}) {
										Assign Room
									}
								</td>
							}
						</tr>
					}
				}
			}
		</tbody>
	</table>
}

func getFriday(date time.Time) time.Time {
	return date.AddDate(0, 0, 4)
}

func getRoom(assignment models.Assignment) string {
	if assignment.Room == nil {
		return "Unassigned"
	}
	return assignment.Room.Number
}

func groupAssignmentsByBlock(assignments []*models.Assignment) map[int][]*models.Assignment {
	var assignmentsByBlock = make(map[int][]*models.Assignment)
	for _, assignment := range assignments {
		assignmentsByBlock[assignment.Block] = append(assignmentsByBlock[assignment.Block], assignment)
	}
	return assignmentsByBlock
}

func groupAssignmentsByRoom(assignments []*models.Assignment) map[int][]*models.Assignment {
	var assignmentsByRoom = make(map[int][]*models.Assignment)
	for _, assignment := range assignments {
		if assignment.Room == nil {
			assignmentsByRoom[-1] = append(assignmentsByRoom[-1], assignment)
			continue
		}
		assignmentsByRoom[assignment.Room.ID] = append(assignmentsByRoom[assignment.Room.ID], assignment)
	}
	return assignmentsByRoom
}

func getRoomNameCellID(assignmentID int) string {
	prefix := "room-name-cell-"
	return prefix + strconv.Itoa(assignmentID)
}

func roomCount(assignments []*models.Assignment) map[int]int {
	roomCounter := make(map[int]int)
	for _, assignment := range assignments {
		if assignment.Room != nil {
			roomCounter[assignment.Room.ID]++
		}
	}
	return roomCounter
}

func isOverBooked(room *models.Room, assignments []*models.Assignment) bool {
	var maxCapacity int
	// if any students in this room and block have one on one, max capacity is 1
	for _, assignment := range assignments {
		if assignment.Room == nil {
			continue
		}
		if assignment.Room.ID != room.ID {
			continue
		}
		if assignment.Student.OneOnOne {
			log.Printf("Room %s has a one on one accommodation", room.Number)
			maxCapacity = 1
			break
		} else {
			maxCapacity = room.MaxCapacity
		}
	}
	roomCounter := roomCount(assignments)
	if roomCounter[room.ID] > maxCapacity {
		log.Printf("Room %s is overbooked", room.Number)
		return true
	}
	log.Printf("Room %s is not overbooked", room.Number)
	log.Printf("Room count: %s ", strconv.Itoa(roomCounter[room.ID]))
	log.Printf("Max capacity: %s ", strconv.Itoa(maxCapacity))

	return false
}

func createOverBookedTracker(a models.Assignments) map[int]bool {
	var overbookedTracker = make(map[int]bool)
	for _, assignment := range a {
		// check if key is already in map
		if assignment.Room == nil {
			continue
		}
		if assignment.Room.ID == -1 {
			continue
		}
		if _, ok := overbookedTracker[assignment.Room.ID]; ok {
			continue
		}
		overbookedTracker[assignment.Room.ID] = isOverBooked(assignment.Room, a)
	}
	return overbookedTracker
}

const overBookedWarningClass = "text-red-500"

func filterAssignmentsForDay(date time.Time, assignments models.Assignments) models.Assignments {
	var filtered []*models.Assignment
	for _, assignment := range assignments {
		if assignment.TestEvent.TestDate.Format(format) == date.Format(format) {
			filtered = append(filtered, assignment)
		}
	}
	return filtered
}

func getThisMonday() time.Time {
	today := time.Now()
	return today.AddDate(0, 0, -int(today.Weekday())+1)
}
