package views

import (
	"github.com/labstack/echo/v4"
	"log"
	"sep_setting_mgr/internal/domain/models"
	"sep_setting_mgr/internal/handlers/common"
	"sep_setting_mgr/internal/handlers/views/components"
	"strconv"
	"time"
)

const format string = "2006-01-02"

func getToday() time.Time {
	return time.Now()
}

func getThisMonday() time.Time {
	today := getToday()
	return today.AddDate(0, 0, -int(today.Weekday())+1)
}

templ CalendarComponent(assignments []*models.Assignment, admin bool, r *echo.Echo) {
	<h1>Calendar</h1>
	@WeekComponent(getThisMonday(), assignments, admin, r)
	@WeekComponent(getThisMonday().AddDate(0, 0, 7), assignments, admin, r)
}

func filterAssignmentsForDay(date time.Time, assignments []*models.Assignment) []*models.Assignment {
	var filtered []*models.Assignment
	for _, assignment := range assignments {
		if assignment.TestEvent.TestDate.Format(format) == date.Format(format) {
			filtered = append(filtered, assignment)
		}
	}
	return filtered
}

templ DayComponent(date time.Time, assignments []*models.Assignment, admin bool, r *echo.Echo) {
	<h3>{ date.Format(format) }</h3>
	@TestEventTable(groupAssignmentsByBlock(assignments), admin, r)
}

func getFriday(date time.Time) time.Time {
	return date.AddDate(0, 0, 4)
}

templ WeekComponent(date time.Time, assignments []*models.Assignment, admin bool, r *echo.Echo) {
	if date.Weekday() != time.Monday {
		return
	}
	<h2>Week of { date.Format(format) } to { getFriday(date).Format(format) } </h2>
	// filter assignments for this day
	<div class="flex gap-2">
		for i := 0; i < 5; i++ {
			@DayComponent(date.AddDate(0, 0, i), filterAssignmentsForDay(date.AddDate(0, 0, i), assignments), admin, r)
		}
	</div>
}

func getRoom(assignment models.Assignment) string {
	if assignment.Room == nil {
		return "Unassigned"
	}
	return assignment.Room.Number
}

func groupAssignmentsByBlock(assignments []*models.Assignment) map[int][]*models.Assignment {
	var assignmentsByBlock = make(map[int][]*models.Assignment)
	for _, assignment := range assignments {
		assignmentsByBlock[assignment.Block] = append(assignmentsByBlock[assignment.Block], assignment)
	}
	return assignmentsByBlock
}

func getRoomNameCellID(assignmentID int) string {
	prefix := "room-name-cell-"
	return prefix + strconv.Itoa(assignmentID)
}

func roomCount(assignments []*models.Assignment) map[int]int {
	roomCounter := make(map[int]int)
	for _, assignment := range assignments {
		if assignment.Room != nil {
			roomCounter[assignment.Room.ID]++
		}
	}
	return roomCounter
}

func isOverBooked(room *models.Room, assignments []*models.Assignment) bool {
	var maxCapacity int
	// if any students in this room and block have one on one, max capacity is 1
	for _, assignment := range assignments {
		if assignment.Room == nil {
			continue
		}
		if assignment.Room.ID != room.ID {
			continue
		}
		if assignment.Student.OneOnOne {
			log.Printf("Rooom %s has a one on one accommodation", room.Number)
			maxCapacity = 1
			break
		} else {
			maxCapacity = room.MaxCapacity
		}
	}
	roomCounter := roomCount(assignments)
	if roomCounter[room.ID] > maxCapacity {
		log.Printf("Room %s is overbooked", room.Number)
		return true
	}
	log.Printf("Room %s is not overbooked", room.Number)
	log.Printf("Room count: %s ", strconv.Itoa(roomCounter[room.ID]))
	log.Printf("Max capacity: %s ", strconv.Itoa(maxCapacity))

	return false
}

templ TestEventTable(assignmentsByBlock map[int][]*models.Assignment, admin bool, r *echo.Echo) {
	<table>
		<thead>
			<tr>
				<th>First Name</th>
				<th>Last Name</th>
				<th>Test Name</th>
				<th>One on One</th>
				<th>Block</th>
				<th>Room</th>
			</tr>
		</thead>
		<tbody>
			for block, assignments := range assignmentsByBlock {
				@BlockTable(block, assignments, admin, r)
			}
		</tbody>
	</table>
}

const overBookedWarningClass = "text-red-500"

templ BlockTable(block int, assignments []*models.Assignment, admin bool, r *echo.Echo) {
	<tr><td colspan="5">Block { strconv.Itoa(block) }</td></tr>
	for _, assignment := range assignments {
		<tr>
			<td>{ assignment.Student.FirstName }</td>
			<td>{ assignment.Student.LastName }</td>
			<td>{ assignment.TestEvent.TestName }</td>
			<td>{ strconv.FormatBool(assignment.Student.OneOnOne) }</td>
			<td>{ strconv.Itoa(assignment.Block) }</td>
			<td
				id={ getRoomNameCellID(assignment.ID) }
				if admin && assignment.Room != nil && isOverBooked(assignment.Room, assignments) {
					class={ overBookedWarningClass }
				}
			>{ getRoom(*assignment) }</td>
			if admin {
				<td>
					@components.ButtonComponent(components.Button{
						Attr: templ.Attributes{
							"hx-get":      r.Reverse(string(common.ShowAssignRoomForm), assignment.ID),
							"hx-target":   "#modal",
							"hx-push-url": "true",
						},
					}) {
						Assign Room
					}
				</td>
			}
		</tr>
	}
}
