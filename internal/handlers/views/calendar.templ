package views

import (
	"github.com/labstack/echo/v4"
	"log"
	"sep_setting_mgr/internal/domain/models"
	"sep_setting_mgr/internal/handlers/common"
	"sep_setting_mgr/internal/handlers/views/components"
	"strconv"
	"time"
)

const format string = "2006-01-02"

templ CalendarComponent(date time.Time, assignmentsMap models.AssignmentsByDate, rooms models.Rooms, admin bool, r *echo.Echo) {
	<div class="flex flex-col items-center text-center">
		<h1>Calendar</h1>
		@WeekComponent(getThisMonday(date), assignmentsMap, rooms, admin, r)
	</div>
}

templ WeekComponent(date time.Time, dates models.AssignmentsByDate, rooms models.Rooms, admin bool, r *echo.Echo) {
	<h2>Week of { date.Format(format) } to { date.AddDate(0, 0, 4).Format(format) } </h2>
	<div class="flex gap-2">
		@components.ButtonComponent(components.Button{
			Attr: templ.Attributes{
				"hx-get":      r.Reverse(string(common.AdminCalendar), date.AddDate(0, 0, -7).Format(format)),
				"hx-target":   "#details",
				"hx-push-url": "true",
			},
		}) {
			Previous
		}
		@components.ButtonComponent(components.Button{
			Attr: templ.Attributes{
				"hx-get":      r.Reverse(string(common.AdminCalendar), date.AddDate(0, 0, 7).Format(format)),
				"hx-target":   "#details",
				"hx-push-url": "true",
			},
		}) {
			Next
		}
	</div>
	<div class="grid gap-2 grid-cols-5">
		for i := 0; i < 5; i++ {
			@DaySimple(date.AddDate(0, 0, i), dates[models.NormalizeDate(date.AddDate(0, 0, i))], rooms, admin, r)
		}
	</div>
}

templ DaySimple(date time.Time, blocks models.AssignmentsByBlock, rooms models.Rooms, admin bool, r *echo.Echo) {
	<div
		if admin {
			hx-get={ r.Reverse(string(common.AdminCalendarDetails), date.Format(format)) }
		} else {
			hx-get={ r.Reverse(string(common.DBCalendarDetails), date.Format(format)) }
		}
		hx-push-url="true"
		hx-target="#details"
		class="cursor-pointer"
	>
		@components.TableWrapperComponent(components.TableData{
			Title: date.Format(format),
		}) {
			<tbody class={ components.TableBodyClass }>
				for i:=0; i<4; i++ {
					@components.SubHeader("Block "+strconv.Itoa(i+1), "large", 1, false)
					for _, room := range rooms.SortByRoomPriority() {
						@RoomSimple(room, blocks[i+1][room.ID], createOverBookedTracker(blocks[i+1][room.ID]), admin, r)
					}
				}
			</tbody>
		}
	</div>
}

templ RoomSimple(room *models.Room, assignments models.Assignments, tracker map[int]bool, admin bool, r *echo.Echo) {
	if len(assignments) == 0 {
		<tr>
			@components.SubHeader(room.Number, "small", 1, false)
			@components.TableCell("No students", false)
		</tr>
	} else if len(assignments) == 1 {
		<tr>
			@components.SubHeader(room.Number, "small", 1, determineWarning(room.ID, tracker))
			@components.TableCell(strconv.Itoa(len(assignments))+" student", warning)
		</tr>
	} else {
		<tr>
			@components.SubHeader(room.Number, "small", 1, determineWarning(room.ID, tracker))
			@components.TableCell(strconv.Itoa(len(assignments))+" students", warning)
		</tr>
	}
}

templ DayComponent(date time.Time, blocks models.AssignmentsByBlock, rooms models.Rooms, admin bool, r *echo.Echo) {
	@components.TableWrapperComponent(components.TableData{
		Title: date.Format(format),
		ID:    "day-details-" + date.Format(format),
	}) {
		@components.TableHeaderComponent([]string{
			"First",
			"Last",
			"Test",
			"1:1",
		},
		)
		<tbody class={ components.TableBodyClass }>
			for i:=0; i<4; i++ {
				@components.SubHeader("Block "+strconv.Itoa(i+1), "large", 5, false)
				for _, room := range rooms.SortByRoomPriority() {
					@RoomComponent(room, blocks[i+1][room.ID], createOverBookedTracker(blocks[i+1][room.ID]), admin, r)
				}
			}
		</tbody>
	}
}

var warning bool

func determineWarning(roomID int, tracker map[int]bool) bool {
	warning = roomID == -1 || tracker[roomID]
	return roomID == -1 || tracker[roomID]
}

templ RoomComponent(room *models.Room, assignments models.Assignments, tracker map[int]bool, admin bool, r *echo.Echo) {
	@components.SubHeader(room.Number, "small", 5, tracker[room.ID])
	if len(assignments) == 0 {
		<tr>
			@components.TableCell("No students", false)
		</tr>
	} else {
		for _, assignment := range assignments {
			<tr>
				@components.TableCell(assignment.Student.FirstName, determineWarning(room.ID, tracker))
				@components.TableCell(assignment.Student.LastName, warning)
				@components.TableCell(assignment.TestEvent.TestName, warning)
				@components.TableCell(strconv.FormatBool(assignment.Student.OneOnOne), warning)
				if admin {
					<td>
						@components.ButtonComponent(components.Button{
							Attr: templ.Attributes{
								"hx-get":      r.Reverse(string(common.ShowAssignRoomForm), assignment.ID),
								"hx-target":   "#modal",
								"hx-push-url": "true",
							},
						}) {
							Assign Room
						}
					</td>
				}
			</tr>
		}
	}
}

func getRoom(assignment models.Assignment) string {
	if assignment.Room == nil {
		return "Unassigned"
	}
	return assignment.Room.Number
}

func getRoomNameCellID(assignmentID int) string {
	prefix := "room-name-cell-"
	return prefix + strconv.Itoa(assignmentID)
}

func roomCount(assignments []*models.Assignment) map[int]int {
	roomCounter := make(map[int]int)
	for _, assignment := range assignments {
		if assignment.Room != nil {
			roomCounter[assignment.Room.ID]++
		}
	}
	return roomCounter
}

func isOverBooked(room *models.Room, assignments []*models.Assignment) bool {
	var maxCapacity int
	// if any students in this room and block have one on one, max capacity is 1
	for _, assignment := range assignments {
		if assignment.Room == nil {
			continue
		}
		if assignment.Room.ID != room.ID {
			continue
		}
		if assignment.Student.OneOnOne {
			log.Printf("Room %s has a one on one accommodation", room.Number)
			maxCapacity = 1
			break
		} else {
			maxCapacity = room.MaxCapacity
		}
	}
	roomCounter := roomCount(assignments)
	if roomCounter[room.ID] > maxCapacity {
		log.Printf("Room %s is overbooked", room.Number)
		return true
	}
	log.Printf("Room %s is not overbooked", room.Number)
	log.Printf("Room count: %s ", strconv.Itoa(roomCounter[room.ID]))
	log.Printf("Max capacity: %s ", strconv.Itoa(maxCapacity))

	return false
}

func createOverBookedTracker(a models.Assignments) map[int]bool {
	var overbookedTracker = make(map[int]bool)
	for _, assignment := range a {
		// check if key is already in map
		if assignment.Room == nil {
			continue
		}
		if assignment.Room.ID == -1 {
			continue
		}
		if _, ok := overbookedTracker[assignment.Room.ID]; ok {
			continue
		}
		overbookedTracker[assignment.Room.ID] = isOverBooked(assignment.Room, a)
	}
	return overbookedTracker
}

const overBookedWarningClass = "text-red-500"

func getThisMonday(date time.Time) time.Time {
	return date.AddDate(0, 0, -int(date.Weekday())+1)
}
